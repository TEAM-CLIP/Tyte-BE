<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.clip.bootstrap.integration.auth.AuthApiIntegrationTest$ReissueTest" tests="3" skipped="0" failures="0" errors="0" timestamp="2025-01-13T12:11:36" hostname="jangseeun-ui-noteubug.local" time="0.077">
  <properties/>
  <testcase name="reissueTokenTest_With_Non_Saved_Token()" classname="com.clip.bootstrap.integration.auth.AuthApiIntegrationTest$ReissueTest" time="0.013"/>
  <testcase name="reissueTokenTest()" classname="com.clip.bootstrap.integration.auth.AuthApiIntegrationTest$ReissueTest" time="0.046"/>
  <testcase name="reissueTokenTest_With_Expired_Token()" classname="com.clip.bootstrap.integration.auth.AuthApiIntegrationTest$ReissueTest" time="0.016"/>
  <system-out><![CDATA[2025-01-13T21:11:36.670+09:00  INFO 7685 --- [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.clip.bootstrap.integration.auth.AuthApiIntegrationTest$ReissueTest]: ReissueTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2025-01-13T21:11:36.672+09:00  INFO 7685 --- [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.clip.bootstrap.TyteApplication for test class com.clip.bootstrap.integration.auth.AuthApiIntegrationTest$ReissueTest
Hibernate: select ute1_0.id from user_token ute1_0 where ute1_0.token=? fetch first ? rows only

MockHttpServletRequest:
      HTTP Method = POST
      Request URI = /api/v1/auth/reissue
       Parameters = {}
          Headers = [Content-Type:"application/json;charset=UTF-8", Content-Length:"31"]
             Body = {"refreshToken":"invalidToken"}
    Session Attrs = {}

Handler:
             Type = com.clip.bootstrap.auth.controller.AuthController
           Method = com.clip.bootstrap.auth.controller.AuthController#reissueToken(ReissueRequest)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = com.clip.application.user.exception.UserException$UserPermissionDeniedException

ModelAndView:
        View name = null
             View = null
            Model = null

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 401
    Error message = null
          Headers = [Vary:"Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", Content-Type:"application/json"]
     Content type = application/json
             Body = {"message":"존재하지 않는 토큰입니다.","code":"USER-004"}
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
Hibernate: select ue1_0.id,ue1_0.created_at,ue1_0.email,ue1_0.nickname,ue1_0.updated_at from user ue1_0 where ue1_0.id=?
Hibernate: insert into user (created_at,email,nickname,updated_at,id) values (?,?,?,?,?)
Hibernate: select ute1_0.id,ute1_0.created_at,ute1_0.token,ute1_0.updated_at,ute1_0.user_id from user_token ute1_0 where ute1_0.id=?
Hibernate: insert into user_token (created_at,token,updated_at,user_id,id) values (?,?,?,?,?)
Hibernate: select ute1_0.id from user_token ute1_0 where ute1_0.token=? fetch first ? rows only
Hibernate: select ute1_0.id,ute1_0.created_at,ute1_0.token,ute1_0.updated_at,ute1_0.user_id from user_token ute1_0 where ute1_0.token=?
Hibernate: select ue1_0.id,ue1_0.created_at,ue1_0.email,ue1_0.nickname,ue1_0.updated_at from user ue1_0 where ue1_0.id=?
Hibernate: select ute1_0.id,ute1_0.created_at,ute1_0.token,ute1_0.updated_at,ute1_0.user_id from user_token ute1_0 where ute1_0.id=?
Hibernate: insert into user_token (created_at,token,updated_at,user_id,id) values (?,?,?,?,?)
Hibernate: delete from user_token where id=?
Hibernate: select ue1_0.id,ue1_0.created_at,ue1_0.email,ue1_0.nickname,ue1_0.updated_at from user ue1_0 where ue1_0.id=?
Hibernate: insert into user (created_at,email,nickname,updated_at,id) values (?,?,?,?,?)
Hibernate: select ute1_0.id,ute1_0.created_at,ute1_0.token,ute1_0.updated_at,ute1_0.user_id from user_token ute1_0 where ute1_0.id=?
Hibernate: insert into user_token (created_at,token,updated_at,user_id,id) values (?,?,?,?,?)
Hibernate: select ute1_0.id from user_token ute1_0 where ute1_0.token=? fetch first ? rows only
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
